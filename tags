!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC=gcc$/;"	m
CL_Resources	include/resources.hpp	/^class CL_Resources {$/;"	c
CL_Resources	src/resources.cpp	/^CL_Resources::CL_Resources():$/;"	f	class:CL_Resources
CXX	Makefile	/^CXX=g++$/;"	m
Camera	include/camera.hpp	/^		Camera(const mat4 &_cam2world, Film *_film)$/;"	f	class:Camera
Camera	include/camera.hpp	/^class Camera {$/;"	c
CameraSample	include/sample.hpp	/^class CameraSample {$/;"	c
CameraToWorld	include/camera.hpp	/^		mat4 CameraToWorld;$/;"	m	class:OrthoCamera
ChangeBasis	src/camera.cpp	/^void ChangeBasis(const mat4 &_matrix, const vec3 &_pt, vec3 *_target) { $/;"	f
GetMoreSamples	src/sampler.cpp	/^int Sampler::GetMoreSamples(CameraSample *sample) {$/;"	f	class:Sampler
HEIGHT	src/ray_marching.cpp	13;"	d	file:
I	src/OpenGLUtil.c	13;"	d	file:
INCLUDEPATH	Makefile	/^INCLUDEPATH = -I.\/include\/ $(shell sdl2-config --cflags) -I\/opt\/cuda\/include\/$/;"	m
LDFLAGS	Makefile	/^LDFLAGS= $(shell sdl2-config --libs) \\$/;"	m
OBJDIR	Makefile	/^OBJDIR = obj$/;"	m
OBJS	Makefile	/^OBJS := $(patsubst $(SRCDIR)\/%.c,$(OBJDIR)\/%.o,$(SRCSC))$/;"	m
OPTS	Makefile	/^OPTS=-Wall -g -c$/;"	m
OPTSC	Makefile	/^OPTSC=-Wall -g -c -std=c99$/;"	m
OpenCLHandle	include/OpenCLUtil.h	/^struct OpenCLHandle {$/;"	s
OrthoCamera	include/camera.hpp	/^		OrthoCamera(const mat4 &_cam2world, const mat4 &_proj, Film *_film)$/;"	f	class:OrthoCamera
OrthoCamera	include/camera.hpp	/^class OrthoCamera : public ProjectiveCamera {$/;"	c
PI	src/OpenGLUtil.c	12;"	d	file:
PROGRAM_FILE	src/ray_marching.cpp	11;"	d	file:
PROJECT	Makefile	/^PROJECT=program$/;"	m
ProjectiveCamera	include/camera.hpp	/^		ProjectiveCamera(const mat4 &_cam2world, const mat4 &_proj, Film *_film)$/;"	f	class:ProjectiveCamera
ProjectiveCamera	include/camera.hpp	/^class ProjectiveCamera : public Camera {$/;"	c
RasterToCamera	include/camera.hpp	/^		mat4 RasterToCamera;$/;"	m	class:OrthoCamera
Ray	include/ray.hpp	/^class Ray {$/;"	c
Ray	src/ray.cpp	/^Ray::Ray(vec3 _point, vec3 _dir):$/;"	f	class:Ray
SRCDIR	Makefile	/^SRCDIR = src$/;"	m
SRCDIRS	Makefile	/^SRCDIRS := $(shell find $(SRCDIR) -type d | sed 's\/$(SRCDIR)\/.\/g' )$/;"	m
SRCS	Makefile	/^SRCS := $(shell find $(SRCDIR) -name '*.cpp')$/;"	m
SRCSC	Makefile	/^SRCSC := $(shell find $(SRCDIR) -name '*.c')$/;"	m
Sampler	include/sampler.hpp	/^class Sampler {$/;"	c
Sampler	src/sampler.cpp	/^Sampler::Sampler(int xstart, int xend, int ystart, int yend, int spp)$/;"	f	class:Sampler
TXT_H	src/ray_marching.cpp	15;"	d	file:
TXT_W	src/ray_marching.cpp	14;"	d	file:
WIDTH	src/ray_marching.cpp	12;"	d	file:
_CAMERASAMPLE_H_	include/sample.hpp	2;"	d
_CAMERA_H_	include/camera.hpp	2;"	d
_MARCHING_CUBES_	include/ray_marching.hpp	2;"	d
_OPENCLUTIL_H_	include/OpenCLUtil.h	2;"	d
_OPENGLUTIL_H_	include/OpenGLUtil.h	2;"	d
_RAY_H_	include/ray.hpp	2;"	d
_RESOURCES_H_	include/resources.hpp	2;"	d
_SAMPLER_H_	include/sampler.hpp	2;"	d
_SDLUTIL_H_	include/SDLUtil.h	2;"	d
addKernel	src/resources.cpp	/^void CL_Resources::addKernel(cl_program *_program, const std::string &_name) {$/;"	f	class:CL_Resources
addMemObj	src/resources.cpp	/^void CL_Resources::addMemObj(cl_mem *_obj, const std::string &_name) {$/;"	f	class:CL_Resources
compile_shader	src/OpenGLUtil.c	/^void compile_shader(GLint shader) {$/;"	f
context	include/OpenCLUtil.h	/^	cl_context context;$/;"	m	struct:OpenCLHandle
contexterror	src/OpenCLUtil.c	/^void CL_CALLBACK contexterror(const char *errinfo, const void *private_info, size_t cb, void *user_data) {$/;"	f
createKernel	src/OpenCLUtil.c	/^cl_kernel createKernel(const cl_program *_program, const char *_kernel) {$/;"	f
createProgramFromSource	src/OpenCLUtil.c	/^int createProgramFromSource(struct OpenCLHandle *_handle, const char *_program_file, cl_program *_program) {$/;"	f
create_shader	src/OpenGLUtil.c	/^GLuint create_shader(char *_vertex, char *_fragment) {$/;"	f
ctx	src/ray_marching.cpp	/^SDL_GLContext ctx = NULL;$/;"	v
device	include/OpenCLUtil.h	/^	cl_device_id device;$/;"	m	struct:OpenCLHandle
draw	src/ray_marching.cpp	/^void draw(float _time) {$/;"	f
dump_sdl_error	src/SDLUtil.c	/^void dump_sdl_error( void )$/;"	f
errorfunc	src/OpenCLUtil.c	/^int errorfunc(char *string, int err) {$/;"	f
execute_kernel	src/ray_marching.cpp	/^void execute_kernel(struct OpenCLHandle *_handle) {$/;"	f
flags	include/SDLUtil.h	/^	uint32_t flags;$/;"	m	struct:settings
generateRay	src/camera.cpp	/^float OrthoCamera::generateRay(const CameraSample &sample, Ray *ray) {$/;"	f	class:OrthoCamera
getBufferInfo	src/OpenCLUtil.c	/^void getBufferInfo(char *_name, cl_mem _mem) {$/;"	f
getCLErrorString	src/OpenCLUtil.c	/^char *getCLErrorString(cl_int err) {$/;"	f
getKernel	src/resources.cpp	/^cl_kernel *CL_Resources::getKernel(const std::string &_name)const  {$/;"	f	class:CL_Resources
getMemObj	src/resources.cpp	/^cl_mem *CL_Resources::getMemObj(const std::string &_name)const {$/;"	f	class:CL_Resources
gl_info	src/SDLUtil.c	/^void gl_info( void )$/;"	f
handle	src/ray_marching.cpp	/^struct OpenCLHandle handle;$/;"	v	typeref:struct:OpenCLHandle
height	include/SDLUtil.h	/^	int height;$/;"	m	struct:settings
imageX	include/sample.hpp	/^		float imageX;$/;"	m	class:CameraSample
imageY	include/sample.hpp	/^		float imageY;$/;"	m	class:CameraSample
indices	src/ray_marching.cpp	/^int indices[] = { 0, 1, 2, 0, 2, 3};$/;"	v
initGL	src/ray_marching.cpp	/^void initGL() {$/;"	f
initOpenCLContext	src/OpenCLUtil.c	/^int initOpenCLContext(struct OpenCLHandle *_handle) {$/;"	f
initOpenCLGLContext	src/OpenCLUtil.c	/^int initOpenCLGLContext(struct OpenCLHandle *_handle) {$/;"	f
init_buffers	src/ray_marching.cpp	/^void init_buffers(struct OpenCLHandle *_handle) {$/;"	f
interrupt	src/ray_marching.cpp	/^void interrupt(std::string _errormessage, int _errorcode) {$/;"	f
isReleased	include/resources.hpp	/^		bool isReleased;$/;"	m	class:CL_Resources
m_cameraToWorld	include/camera.hpp	/^		mat4 m_cameraToWorld;$/;"	m	class:Camera
m_dir	include/ray.hpp	/^		vec3 m_dir;$/;"	m	class:Ray
m_film	include/camera.hpp	/^		Film *m_film;$/;"	m	class:Camera
m_kernels	include/resources.hpp	/^		std::map<std::string, cl_kernel*> m_kernels;$/;"	m	class:CL_Resources
m_memory	include/resources.hpp	/^		std::map<std::string, cl_mem*> m_memory;$/;"	m	class:CL_Resources
m_point	include/ray.hpp	/^		vec3 m_point;$/;"	m	class:Ray
m_projection	include/camera.hpp	/^		mat4 m_projection;$/;"	m	class:ProjectiveCamera
main	src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
mainloop	src/SDLUtil.c	/^void mainloop(SDL_Window *_win,void (*init_function)(), void (*draw_function)(float))$/;"	f
make-repo	Makefile	/^define make-repo$/;"	m
matrixLookAtM	src/OpenGLUtil.c	/^void matrixLookAtM(float *m,$/;"	f
matrixMultiplyMM	src/OpenGLUtil.c	/^void matrixMultiplyMM(float *m, float *lhs, float *rhs)$/;"	f
matrixSetIdentityM	src/OpenGLUtil.c	/^void matrixSetIdentityM(float *m)$/;"	f
matrixSetProjectionM	src/OpenGLUtil.c	/^void matrixSetProjectionM(float *m, float fov, float aspect, $/;"	f
matrixTranslateM	src/OpenGLUtil.c	/^void matrixTranslateM(float *m, float x, float y, float z)$/;"	f
normalize	src/OpenGLUtil.c	7;"	d	file:
platform	include/OpenCLUtil.h	/^	cl_platform_id platform;$/;"	m	struct:OpenCLHandle
position_x	include/SDLUtil.h	/^	int position_x;$/;"	m	struct:settings
position_y	include/SDLUtil.h	/^	int position_y;$/;"	m	struct:settings
program	src/ray_marching.cpp	/^cl_program program;$/;"	v
queue	include/OpenCLUtil.h	/^	cl_command_queue queue;$/;"	m	struct:OpenCLHandle
read_file	src/OpenGLUtil.c	/^char* read_file(const char* filename, size_t* size) {$/;"	f
release	src/resources.cpp	/^void CL_Resources::release() {$/;"	f	class:CL_Resources
res	src/ray_marching.cpp	/^CL_Resources res;$/;"	v
run	src/ray_marching.cpp	/^void run() {$/;"	f
sampleBuf	include/sampler.hpp	/^		float sampleBuf;$/;"	m	class:Sampler
samplesPerPixel	include/sampler.hpp	/^		const int samplesPerPixel;$/;"	m	class:Sampler
setGLContext	src/SDLUtil.c	/^SDL_Window *setGLContext(SDL_GLContext *_ctx, struct settings *_settings)$/;"	f
sets	src/ray_marching.cpp	/^struct settings sets = {(char*)"Ray_marching",$/;"	v	typeref:struct:settings
settings	include/SDLUtil.h	/^struct settings {$/;"	s
texture	src/ray_marching.cpp	/^GLuint texture;$/;"	v
title	include/SDLUtil.h	/^	char *title;$/;"	m	struct:settings
vao	src/ray_marching.cpp	/^GLuint vao;$/;"	v
width	include/SDLUtil.h	/^	int width;$/;"	m	struct:settings
xPixelEnd	include/sampler.hpp	/^		const int xPixelStart, xPixelEnd, yPixelStart, yPixelEnd;$/;"	m	class:Sampler
xPixelSamples	include/sampler.hpp	/^		const int xPixelSamples, yPixelSamples;$/;"	m	class:Sampler
xPixelStart	include/sampler.hpp	/^		const int xPixelStart, xPixelEnd, yPixelStart, yPixelEnd;$/;"	m	class:Sampler
xPos	include/sampler.hpp	/^		int xPos, yPos;$/;"	m	class:Sampler
yPixelEnd	include/sampler.hpp	/^		const int xPixelStart, xPixelEnd, yPixelStart, yPixelEnd;$/;"	m	class:Sampler
yPixelSamples	include/sampler.hpp	/^		const int xPixelSamples, yPixelSamples;$/;"	m	class:Sampler
yPixelStart	include/sampler.hpp	/^		const int xPixelStart, xPixelEnd, yPixelStart, yPixelEnd;$/;"	m	class:Sampler
yPos	include/sampler.hpp	/^		int xPos, yPos;$/;"	m	class:Sampler
~CL_Resources	src/resources.cpp	/^CL_Resources::~CL_Resources() {$/;"	f	class:CL_Resources
